{"ast":null,"code":"//用于计算最新的状态\n\nimport { ADD, DEL, CHANGE } from \"./actionType\";\n\n//仓库一开始默认的数据\nlet defaultState = {\n  list: [{\n    content: \"学习react\",\n    status: false\n  }, {\n    content: \"扫地\",\n    status: false\n  }, {\n    content: \"投简历\",\n    status: false\n  }, {\n    content: \"背面试题\",\n    status: false\n  }]\n};\n\n/**\r\n * 通过这个纯函数计算出最新的状态\r\n * state : 仓库数据，每次会传入上一次的仓库数据\r\n * action : 描述对象 {type: ADD, text: \"学习 redux\"}\r\n */\nexport function todoReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  //有了描述对象后，就可以根据就状态计算出新的状态并返回\n  switch (action.type) {\n    case ADD:\n      {\n        //新增的操作\n        const arr = [...state.list];\n        arr.push({\n          content: action.data,\n          state: false\n        });\n        return {\n          list: arr\n        };\n      }\n      ;\n    case DEL:\n      {\n        //删除操作\n        const arr = [...state.list];\n        arr.splice(action.data, 1);\n        return {\n          list: arr\n        };\n      }\n    case CHANGE:\n      {\n        const arr = [...state.list];\n        arr[action.data].status = !arr[action.data].status;\n        return {\n          list: arr\n        };\n      }\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["ADD","DEL","CHANGE","defaultState","list","content","status","todoReducer","state","arguments","length","undefined","action","type","arr","push","data","splice"],"sources":["D:/qd/learn/react/入门/my-app/src/redux/reducers.js"],"sourcesContent":["//用于计算最新的状态\r\n\r\nimport { ADD, DEL, CHANGE } from \"./actionType\";\r\n\r\n//仓库一开始默认的数据\r\nlet defaultState = {\r\n    list:[\r\n        {\r\n            content: \"学习react\",\r\n            status: false,\r\n        },\r\n        {\r\n            content: \"扫地\",\r\n            status: false,\r\n        },\r\n        {\r\n            content: \"投简历\",\r\n            status: false,\r\n        },\r\n        {\r\n            content: \"背面试题\",\r\n            status: false,\r\n        },\r\n    ],\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * 通过这个纯函数计算出最新的状态\r\n * state : 仓库数据，每次会传入上一次的仓库数据\r\n * action : 描述对象 {type: ADD, text: \"学习 redux\"}\r\n */\r\nexport function todoReducer(state = defaultState, action) {\r\n    //有了描述对象后，就可以根据就状态计算出新的状态并返回\r\n    switch (action.type) {\r\n        case ADD: {\r\n            //新增的操作\r\n            const arr = [...state.list];\r\n            arr.push({\r\n                content: action.data,\r\n                state: false,\r\n            })\r\n            return { list: arr };\r\n        };\r\n        case DEL: {\r\n            //删除操作\r\n            const arr = [...state.list];\r\n            arr.splice(action.data,1);\r\n            return { list: arr };\r\n        }\r\n        case CHANGE: {\r\n            const arr = [...state.list];\r\n            arr[action.data].status = !arr[action.data].status;\r\n            return { list: arr };\r\n            }\r\n        default: return state;\r\n    }\r\n}"],"mappings":"AAAA;;AAEA,SAASA,GAAG,EAAEC,GAAG,EAAEC,MAAM,QAAQ,cAAc;;AAE/C;AACA,IAAIC,YAAY,GAAG;EACfC,IAAI,EAAC,CACD;IACIC,OAAO,EAAE,SAAS;IAClBC,MAAM,EAAE;EACZ,CAAC,EACD;IACID,OAAO,EAAE,IAAI;IACbC,MAAM,EAAE;EACZ,CAAC,EACD;IACID,OAAO,EAAE,KAAK;IACdC,MAAM,EAAE;EACZ,CAAC,EACD;IACID,OAAO,EAAE,MAAM;IACfC,MAAM,EAAE;EACZ,CAAC;AAET,CAAC;;AAMD;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAAA,EAA+B;EAAA,IAA9BC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGN,YAAY;EAAA,IAAES,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACpD;EACA,QAAQC,MAAM,CAACC,IAAI;IACf,KAAKb,GAAG;MAAE;QACN;QACA,MAAMc,GAAG,GAAG,CAAC,GAAGN,KAAK,CAACJ,IAAI,CAAC;QAC3BU,GAAG,CAACC,IAAI,CAAC;UACLV,OAAO,EAAEO,MAAM,CAACI,IAAI;UACpBR,KAAK,EAAE;QACX,CAAC,CAAC;QACF,OAAO;UAAEJ,IAAI,EAAEU;QAAI,CAAC;MACxB;MAAC;IACD,KAAKb,GAAG;MAAE;QACN;QACA,MAAMa,GAAG,GAAG,CAAC,GAAGN,KAAK,CAACJ,IAAI,CAAC;QAC3BU,GAAG,CAACG,MAAM,CAACL,MAAM,CAACI,IAAI,EAAC,CAAC,CAAC;QACzB,OAAO;UAAEZ,IAAI,EAAEU;QAAI,CAAC;MACxB;IACA,KAAKZ,MAAM;MAAE;QACT,MAAMY,GAAG,GAAG,CAAC,GAAGN,KAAK,CAACJ,IAAI,CAAC;QAC3BU,GAAG,CAACF,MAAM,CAACI,IAAI,CAAC,CAACV,MAAM,GAAG,CAACQ,GAAG,CAACF,MAAM,CAACI,IAAI,CAAC,CAACV,MAAM;QAClD,OAAO;UAAEF,IAAI,EAAEU;QAAI,CAAC;MACpB;IACJ;MAAS,OAAON,KAAK;EAAC;AAE9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}